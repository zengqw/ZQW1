<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           				   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           				   http://www.springframework.org/schema/aop
           				   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           				   http://www.springframework.org/schema/tx
           				   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           				   http://www.springframework.org/schema/context
           				   http://www.springframework.org/schema/context/spring-context-3.2.xsd
           				   http://www.springframework.org/schema/mvc  
     					   http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 开启Aspectj支持 -->
	<aop:aspectj-autoproxy />

	<!-- 开启组件扫描: 告诉Spring去哪些包找 : @Repository、@Service、@Controller、@Component注解Bean，将由Spring容器管理 -->
	<context:component-scan base-package="com.*">
		<!-- 按annotation注解的类型去扫描 吧 use-default-filters="false" <context:include-filter 
			type="annotation" expression="org.springframework.stereotype.Service"/> -->
		<!-- 扫描具体的单个Bean <context:include-filter type="assignable" expression="org..impl.IdentityServiceImpl"/> -->
		<!-- 以aspectj表达式的形式去扫描 <context:include-filter type="aspectj" expression="org.oa.*.admin.*.*.*"/> -->
		<!-- 以正则表达式的方式去扫描 <context:include-filter type="regex" expression="org..service.*"/> -->
	</context:component-scan>
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 配置数据源:dataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 用户名 -->
		<property name="user" value="${datasource.user}" />
		<!-- 用户密码 -->
		<property name="password" value="${datasource.password}" />
		<property name="driverClass" value="${datasource.driverClass}" />
		<property name="jdbcUrl" value="${datasource.jdbcUrl}" />
		<!--连接池中保留的最大连接数。默认值: 15 -->
		<property name="maxPoolSize" value="${datasource.maxPoolSize}" />
		<!-- 连接池中保留的最小连接数，默认为：3 -->
		<property name="minPoolSize" value="${datasource.minPoolSize}" />
		<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3 -->
		<property name="initialPoolSize" value="${datasource.initialPoolSize}" />
		<!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
		<property name="maxIdleTime" value="${datasource.maxIdleTime}" />
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 
			0 -->
		<property name="checkoutTimeout" value="${datasource.checkoutTimeout}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="2" />
		<property name="testConnectionOnCheckin" value="false" />
		<property name="testConnectionOnCheckout" value="true" />
		<property name="idleConnectionTestPeriod" value="18000" />
	</bean>

	<!-- hibernate 拦截器 -->
	<bean id="hibernateInterceptor" class="com.sql.hibrenate.HibernateOperatInterceptor" />

	<!-- 配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource" p:entityInterceptor-ref="hibernateInterceptor"
		p:configLocation="classpath:hibernate.cfg.xml" />

	<!-- 配置transactionManager事务管事器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 开启annotation注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="daoTemplate" abstract="true" lazy-init="false"
		p:sessionFactory-ref="sessionFactory" />
	<bean id="teacherDaoHibernateTemplate" class="com.sql.hibrenate.TeacherDaoHibernateTemplate"
		parent="daoTemplate" />


</beans>